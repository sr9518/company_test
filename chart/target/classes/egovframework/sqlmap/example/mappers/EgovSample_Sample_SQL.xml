<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="egovframework.example.sample.service.impl.SampleMapper">

	<resultMap id="sample" type="egovframework.example.sample.service.SampleVO">
		<result property="id" column="id"/>
		<result property="name" column="name"/>
		<result property="description" column="description"/>
		<result property="useYn" column="use_yn"/>
		<result property="regUser" column="reg_user"/>
		
		<result property="itemId" column="item_id"/>
		<result property="itemName" column="item_name"/>
		<result property="dealDate" column="deal_date"/>
		<result property="priceOpen" column="price_open"/>
		<result property="priceHigh" column="price_high"/>
		<result property="priceLow" column="price_low"/>
		<result property="priceClose" column="price_close"/>
		<result property="priceAvg5" column="price_avg5"/>
		<result property="priceAvg10" column="price_avg10"/>
		<result property="priceAvg20" column="price_avg20"/>
		<result property="priceAvg60" column="price_avg60"/>
		<result property="priceAvg120" column="price_avg_120"/>
		<result property="volume" column="volume"/>
		<result property="volumeAvg5" column="volume_avg5"/>
		<result property="volumeAvg20" column="volume_avg20"/>
		<result property="volumeAvg60" column="volume_avg60"/>
		<result property="volumeAvg120" column="volume_avg120"/>
		
	</resultMap>

	<!-- <insert id="insertSample" parameterType="SampleVO">

			INSERT INTO SAMPLE
				( ID
				  , NAME
				  , DESCRIPTION
				  , USE_YN
				  , REG_USER )
			VALUES ( #{id}
				  , #{name}
				  , #{description}
				  , #{useYn}
				  , #{regUser} )

	</insert>

	<update id="updateSample">

			update item,item_price
			set id=#{id}
				, NAME=#{name}
				, DESCRIPTION=#{description}
				, USE_YN=#{useYn}
				  WHERE ID=#{id}

	</update> -->

	<delete id="deleteSample">

			delete 
				from item left join item_price on item.item_id = item_price.item_id
			where item.item_id=#{itemId}
		
	</delete>

	<select id="selectSample" resultType="sampleVO" >
			select 
				item.item_id,
			    item.item_name,
			    item_price.item_id,
			    item_price.deal_date,
			    item_price.price_open,
			    item_price.price_high,
				item_price.price_low,
			    item_price.price_close,
				item_price.price_avg5,
			    item_price.price_avg10,
			    item_price.price_avg20,
			    item_price.price_avg60,
			    item_price.price_avg_120,
			    item_price.volume,
			    item_price.volume_avg5,
			    item_price.volume_avg20,
			    item_price.volume_avg60,
			    item_price.volume_avg120
			from
				item left join item_price on item.item_id = item_price.item_id
			where 
				item.item_id = #{itemId} and item_price.deal_date = #{dealDate}
	</select>
	<select id="selectSample2" resultType="sampleVO" >
			select 
				item.item_id,
			    item.item_name,
			    item_price.item_id,
			    item_price.deal_date,
			    item_price.price_open,
			    item_price.price_high,
				item_price.price_low,
			    item_price.price_close,
				item_price.price_avg5,
			    item_price.price_avg10,
			    item_price.price_avg20,
			    item_price.price_avg60,
			    item_price.price_avg_120,
			    item_price.volume,
			    item_price.volume_avg5,
			    item_price.volume_avg20,
			    item_price.volume_avg60,
			    item_price.volume_avg120,
			    date_format(item_price.deal_date,'%Y') as year,
			    date_format(item_price.deal_date,'%m') as month,
			    date_format(item_price.deal_date,'%d') as day
			from
				item left join item_price on item.item_id = item_price.item_id
			where 
				item.item_id = #{itemId} 
				and 
				<![CDATA[ item_price.deal_date < ]]>date_format(#{dealDate},'%Y%m%d') order by item_price.deal_date desc, item.item_id asc limit 1			
	</select>
	<select id="selectSampleList3" resultType="sampleVO" >
			
			select T.*
	from (    
			select rank() over( order by deal_date desc)
				 , item_id
			     , deal_date
			     , price_open
			     , price_high
				 , price_low
			     , price_close
				 , price_avg5
			     , price_avg10
			     , price_avg20
			     , price_avg60
			     , price_avg_120
			     , volume
			     , volume_avg5
			     , volume_avg20
			     , volume_avg60
			     , volume_avg120
				 , rank() over(partition by week(deal_date) order by deal_date desc) as week_date 
				 , rank() over(partition by month(deal_date) order by deal_date desc) as month_date
			  from item_price
			 where item_id = #{itemId}
	      ) T
    where date_format(T.deal_date,'%Y-%m-%d') between date_format(date_add(#{dealDate},interval -3 month), '%Y-%m-%d')
      and date_format(#{dealDate}, '%Y-%m-%d')		
      		<if test='dayType.equals("day")'>
				
			</if>
			<if test='dayType.equals("week") '>
				and T.week_date = '1'
			</if>
			<if test='dayType.equals("month") '>
				and T.month_date = '1'
			</if>
	</select>


	<select id="selectSampleList" parameterType="searchVO" resultType="egovMap">
			
			select 
				I.item_name 
				, IP.* 
				, IP2.*
				, IP2.price_close
			    , IP.price_close - IP2.price_close as 'befoprice'
			    , ((IP.price_close - IP2.price_close)/(IP.price_close+(IP.price_close - IP2.price_close)))*100 as 'befoprice2'
			from (
			<choose>
				<when test='dealDate != null and dealDate !="" '>
					 select max(deal_date) deal_date from item_price where deal_date=date_format(#{dealDate},'%Y%m%d')
				</when>
				<otherwise>
					 select max(deal_date) deal_date from item_price where deal_date='20200131'
				</otherwise>			
			</choose>
				 )T1,
			     (
			     <choose>
				    <when test='dealDate != null and dealDate !="" '>	
						select max(deal_date) deal_date from item_price where deal_date <![CDATA[ < ]]> date_format(#{dealDate},'%Y%m%d') 
					</when>
					<otherwise>	
						select max(deal_date) deal_date from item_price where deal_date <![CDATA[ < ]]> '20200131' 
					</otherwise>
			     </choose>
				 )T2,
				 item I
			     left join item_price IP on IP.item_id = I.item_id
			     left join item_price IP2 on IP2.item_id = I.item_id
			where 
				 1=1
				 and T1.deal_date = IP.deal_date
			     and T2.deal_date = IP2.deal_date
							
				<if test='itemId != null and itemId != "" '>
					and (I.item_name LIKE CONCAT('%${itemId}%') OR IP.item_id LIKE CONCAT('%${itemId}%'))
				</if>
			limit #{recordCountPerPage} offset #{firstIndex}
	</select>
<!-- 	<select id="selectSampleList2" parameterType="searchVO" resultType="egovMap">

			select 
				item.item_id,
			    item.item_name,
			    item_price.item_id,
			    item_price.deal_date,
			    item_price.price_open,
			    item_price.price_high,
				item_price.price_low,
			    item_price.price_close,
			    item_price.volume
			from
				item left join item_price on item.item_id = item_price.item_id
			where 
				1=1
				<if test='dealDate ==null and itemId == null'>
					and item_price.deal_date='20200130' 
				</if>
				<if test='dealDate != null and dealDate !="" '>
					and <![CDATA[ item_price.deal_date < ]]>date_format(#{dealDate},'%Y%m%d') order by item_price.deal_date desc, item.item_id asc 
				</if>
				limit #{recordCountPerPage} offset #{firstIndex}
	</select> -->
	<select id="selectSampleList4" resultType="sampleVO">
select
	T1.item_id,
    date_format(T1.deal_date,'%Y-%m-%d') as deal_date,
    format(T1.price_close, 0) as priceClosetbl,
    format(T1.volume, 0) as volumetbl,
    format(T1.priceAvg5, 2) as priceAvg5tbl,
    format(T1.priceAvg10, 2) as priceAvg10tbl,
    format(T1.priceAvg20, 2) as priceAvg20tbl,
    format(T1.priceAvg60, 2) as priceAvg60tbl,
    format(T1.volumeAvg5, 2) as volumeAvg5tbl,
    format(T1.volumeAvg20, 2) as volumeAvg20tbl,
    format(T1.volumeAvg60, 2) as volumeAvg60tbl
		from (
		select 
			item_id ,
			deal_date ,
            price_close,
            round((case 
            when
				5 = count(*)
                over (order by deal_date rows between 4 preceding and current row)
                then
					avg(sum(price_close))
                    over (order by deal_date rows between 4 preceding and current row)
                    end), 2)
                    as priceAvg5,
			 round((case 
            when
				10 = count(*)
                over (order by deal_date rows between 9 preceding and current row)
                then
					avg(sum(price_close))
                    over (order by deal_date rows between 9 preceding and current row)
                    end), 2)
                    as priceAvg10,
			 round((case 
            when
				20 = count(*)
                over (order by deal_date rows between 19 preceding and current row)
                then
					avg(sum(price_close))
                    over (order by deal_date rows between 19 preceding and current row)
                    end), 2)
                    as priceAvg20,
			 round((case 
            when
				60 = count(*)
                over (order by deal_date rows between 59 preceding and current row)
                then
					avg(sum(price_close))
                    over (order by deal_date rows between 59 preceding and current row)
                    end), 2)
                    as priceAvg60,
                    volume,
			 round((case 
            when
				5 = count(*)
                over (order by deal_date rows between 4 preceding and current row)
                then
					avg(sum(volume))
                    over (order by deal_date rows between 4 preceding and current row)
                    end), 2)
                    as volumeAvg5,
			 round((case 
            when
				20 = count(*)
                over (order by deal_date rows between 19 preceding and current row)
                then
					avg(sum(volume))
                    over (order by deal_date rows between 19 preceding and current row)
                    end), 2)
                    as volumeAvg20,
			  round((case 
            when
				60 = count(*)
                over (order by deal_date rows between 59 preceding and current row)
                then
					avg(sum(volume))
                    over (order by deal_date rows between 59 preceding and current row)
                    end), 2)
                    as volumeAvg60		
			from 
				item_price        
			where item_id=#{itemId}
				group by deal_date, price_close
                order by deal_date desc
			)T1
           where 
           	1=1 
           	and date_format(deal_date,'%Y-%m-%d') between date_format(date_add(#{dealDate},interval -3 week), '%Y-%m-%d')
			and date_format(#{dealDate}, '%Y-%m-%d')
           	limit 10
	</select>
	
	<select id="selectSampleList5" parameterType="searchVO" resultType="egovMap">
			
			select 
				I.item_name 
				, IP.* 
				, IP2.*
				, IP2.price_close
			    , IP.price_close - IP2.price_close as 'befoprice'
			    , ((IP.price_close - IP2.price_close)/(IP.price_close+(IP.price_close - IP2.price_close)))*100 as 'befoprice2'
			from (
			<choose>
				<when test='dealDate != null and dealDate !="" '>
					 select max(deal_date) deal_date from item_price where deal_date=date_format(#{dealDate},'%Y%m%d')
				</when>
				<otherwise>
					 select max(deal_date) deal_date from item_price where deal_date='20200131'
				</otherwise>			
			</choose>
				 )T1,
			     (
			     <choose>
				    <when test='dealDate != null and dealDate !="" '>	
						select max(deal_date) deal_date from item_price where deal_date <![CDATA[ < ]]> date_format(#{dealDate},'%Y%m%d') 
					</when>
					<otherwise>	
						select max(deal_date) deal_date from item_price where deal_date <![CDATA[ < ]]> '20200131' 
					</otherwise>
			     </choose>
				 )T2,
				 item I
			     left join item_price IP on IP.item_id = I.item_id
			     left join item_price IP2 on IP2.item_id = I.item_id
			where 
				 1=1
				 and T1.deal_date = IP.deal_date
			     and T2.deal_date = IP2.deal_date
			
	</select>
	<select id="selectSampleList6" parameterType="searchVO" resultType="egovMap">
		select 
		i.item_id
	  , i.item_name
      , ip.deal_date
      , ip.price_open
      , ip.price_high
      , ip.price_low
      , ip.price_close
      , ip.volume
	from 
		item as i left join item_price as ip on i.item_id = ip.item_id
	where 
		ip.deal_date='20200131' order by deal_date desc
	</select>
	<select id="selectSampleListTotCnt" parameterType="searchVO" resultType="int">

			select 
				count(*) totcnt
			from 
				item left join item_price on item.item_id = item_price.item_id
			where 1=1
			<if test='itemId != null and itemId != "" '>
				and (item.item_name LIKE CONCAT('%${itemId}%') OR item_price.item_id LIKE CONCAT('%${itemId}%'))
			</if>
			<choose>
				<when test='dealDate != null and dealDate !="" '>
					and item_price.deal_date = date_format(#{dealDate},'%Y%m%d')
				</when>
				<otherwise>
					and item_price.deal_date = '20200131'
				</otherwise>						
			</choose>			
	</select>

</mapper>