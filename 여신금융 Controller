SHA512 암호화 Class
Controller에서 SHA512Util class import 설정후
-> String newPassword = SHA512Util.getSHA512(pwd); // 이렇게 사용

public class SHA512Util {
  public static String getSHA512(String input) {
    String toReturn = null;
    try {
      MessageDigest digest = MessageDigest.getInstance("SHA-512");
      digest.reset();
      digest.update(input.getBytes("utf8"));
      toReturn = String.format("%0128x", new BigInteger(1,digest.digest()));
    } catch(Exception e) {
      e.printStackTrace();
    }
      return toReturn;
  }
}

Controller에서 사용 되는 방식
@RequestMapping("/intra/notice/noticeDetail.do")
public String noticeDetail(ModelMap model, HttpServletRequest request) {
  Map params = HttpUtil.getRequestMap(request);
  String ssId = SessionAttribute.getId(request) == null ? "" : SessionAttribute.getId(request);
  if(ssId.equals("")) {
    return "redirect:/intra/member/login.do";
  }
  HashMap resultMap = intra.noticeDetail(params);
  // textarea 값은 decodestr으로 HashMap으로 담는다.
  resultMap.put("content", StringUtil.decodestr((String)resultMap.get("content")));
  
  // 해당 컬럼 값이 null인지 확인방법
  if(!StringUtil.nvl(params.get("pf001"), "").equals("")) {
    model.addAttribute("rptSeq", params.get("pf001"));
  }
  if(params.get("searchAddress") != && !params.get("searchAddress").equals("")) {
    vo.setSearchAddress(params.get("searchAddress").toString());
  }
  
  model.addAttribute("today", DateUtil.getToday("yyyyMM"));
  model.addAttribute("thisYear", DateUtil.getToday("yyyy"));
  /* 비밀번호 관리 */
  // 쿼리 결과가 1이 아니라면 Integer형으로 값을 변수에 저장(""을 사용하여 null이 아닐때로 사용할수있지만 쿼리결과가 null이면 에러 발생)
  passErrCnt = Integer.parseInt(StringUtil.nvl(pfService.loginPassErrCnt(params, request), "1"));
  
  String page = params.get("page").toString();
  String searchCreditorName = URLEncoder.encode(params.get("searchCreditorName").toString(),"UTF-8");
  String searchAddress = URLEncoder.encode(params.get("searchAddress").toString(),"UTF-8");
  
  return "redirect:/intra/manage/pfNoApprovalList.do?page="+page+"&searchCreditorName="+searchCreditorName+"&searchAddress="+searchAddress;
}

redirect에 컬럼명에 값을 넣어 넘기는 방법도 있지만 RedirectAttributes를 사용해서 넘기는 방법도있다
@RequestMapping(value = "origin")
    public String origin(HttpServletRequest request, RedirectAttributes attributes) {
        // page 값 전달은 크게 2가지 방법으로 나뉜다.
        attributes.addAttribute("attr", "attributes1!!!");
        // attributes.addFlashAttribute("attr", "attributes1!!!");
        return "reditrect:reditrectPage";
    }
@RequestMapping(value = "redirectPage")
    public String redirectPage(HttpServletRequest request) {
        // 특수 기호나 한글의 encoding 도 자동으로 해준다.
        System.out.println(request.getParameter("attr"));
        return "showView";
    }

// ajax 사용시 Controller
@RequestMapping("/intra/manage/companyCheck.do")
public ModelAndView companyCheckAjax(ModelMap model, HttpServletRequest request) throws Exception {

  ModelAndView mav = new ModelAndView(new MapXmlView());
  HttpSession session = request.getSession();
  Map<String,Object> params = HttpUtil.getRequestMap(request);
  params.put("mcSeq", Integer.parseInt(session.getAttribute("mcSeq").toString()));
  params.put("createId", (session.getAttribute("id").toString()));
  params.put("createDate", DateUtil.getToday("yyyyMMddHHmmss"));
  
  HashMap<String,Object> companyCheck = pfService.companyCheckAjax(params);
  // Map<String,String> resultMap = new HashMap<String,String>();
  Map resultMap = new HashMap();
  resultMap.put("result", companyCheck.get("result"));
  resultMap.put("result2", companyCheck.get("result2"));
  mav.addObject("map", resultMap);
  return mav;
}

insert되는 쿼리에 @transactional 어노테이션 설정시 값이 잘못됐을때 DB저장 안되고 롤백되는 기능


